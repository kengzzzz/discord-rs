use super::*;
use crate::services::introduction::IntroDetails;

pub fn intro_prompt_embed(
    guild: &Reference<'_, Id<GuildMarker>, CachedGuild>,
    intro_channel_id: impl Display,
) -> anyhow::Result<Embed> {
    let mut footer = footer_with_icon(guild)?;
    footer.text = guild.name().to_string();

    let embed = EmbedBuilder::new()
        .color(COLOR)
        .title(format!("Welcome to {}!", guild.name()))
        .description(format!(
            "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á `/intro` ‡πÉ‡∏ô <#{intro_channel_id}> ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ï‡∏±‡∏ß\n\n**‡∏ö‡∏≠‡∏ó‡πÑ‡∏°‡πà‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ï‡∏±‡∏ß**"
        ))
        .footer(footer)
        .validate()?;

    Ok(embed.build())
}

pub fn intro_unavailable_embed(
    guild: &Reference<'_, Id<GuildMarker>, CachedGuild>,
) -> anyhow::Result<Embed> {
    let mut footer = footer_with_icon(guild)?;
    footer.text = guild.name().to_string();

    let embed = EmbedBuilder::new()
        .color(COLOR_INVALID)
        .title("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ")
        .description("‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ô‡∏µ‡πâ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏´‡πâ‡∏≠‡∏á‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ï‡∏±‡∏ß")
        .footer(footer)
        .validate()?;

    Ok(embed.build())
}

pub fn intro_details_embed(
    guild: &Reference<'_, Id<GuildMarker>, CachedGuild>,
    member_tag: &str,
    details: &IntroDetails,
) -> anyhow::Result<Embed> {
    let now = Utc::now().timestamp_micros();

    let mut footer = footer_with_icon(guild)?;
    footer.text = guild.name().to_string();

    let age = details
        .age
        .map(|a| a.to_string())
        .unwrap_or_else(|| "-".to_string());

    let ign = details.ign.as_deref().unwrap_or("-");
    let clan = details.clan.as_deref().unwrap_or("-");

    let embed = EmbedBuilder::new()
        .color(COLOR)
        .title(format!("{member_tag} ‡πÑ‡∏î‡πâ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ï‡∏±‡∏ß‡πÅ‡∏•‡πâ‡∏ß"))
        .field(EmbedFieldBuilder::new("‡∏ä‡∏∑‡πà‡∏≠", &details.name))
        .field(EmbedFieldBuilder::new("‡∏≠‡∏≤‡∏¢‡∏∏", age))
        .field(EmbedFieldBuilder::new("IGN", ign))
        .field(EmbedFieldBuilder::new("Clan", clan))
        .footer(footer)
        .timestamp(Timestamp::from_micros(now)?)
        .validate()?
        .build();

    Ok(embed)
}

pub fn intro_success_embed(
    guild: &Reference<'_, Id<GuildMarker>, CachedGuild>,
) -> anyhow::Result<Embed> {
    let mut builder = EmbedBuilder::new().color(COLOR).title("‚úÖ ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ï‡∏±‡∏ß‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");

    let mut footer = footer_with_icon(guild)?;
    footer.text = guild.name().to_string();
    builder = builder.footer(footer);

    let embed = builder.validate()?.build();

    Ok(embed)
}

pub fn intro_error_embed() -> anyhow::Result<Embed> {
    let embed = EmbedBuilder::new()
        .color(COLOR_INVALID)
        .title("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î")
        .description("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á")
        .validate()?
        .build();
    Ok(embed)
}

pub fn quarantine_embed(
    guild: &Reference<'_, Id<GuildMarker>, CachedGuild>,
    message: &Message,
    channel_id: u64,
    token: &str,
) -> anyhow::Result<[Embed; 2]> {
    let mut footer = footer_with_icon(guild)?;
    footer.text = guild.name().to_string();

    let mut builder = EmbedAuthorBuilder::new(&message.author.name);
    if let Some(avatar) = &message.author.avatar {
        let url = format!(
            "https://cdn.discordapp.com/avatars/{}/{}.png",
            message.author.id.get(),
            avatar,
        );
        builder = builder.icon_url(ImageSource::url(url)?);
    }
    let author = builder.build();

    let alert = EmbedBuilder::new()
        .color(COLOR_INVALID)
        .title("üö® ‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏™‡∏á‡∏™‡∏±‡∏¢")
        .description(format!("‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏•‡∏î‡∏•‡πá‡∏≠‡∏Ñ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á verify ‡πÉ‡∏ô <#{channel_id}>"))
        .field(EmbedFieldBuilder::new("üîë token ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö verify", format!("```{token}```")).inline())
        .field(EmbedFieldBuilder::new("üí¨ ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á", format!("`/verify {token}`")).inline())
        .footer(footer.clone())
        .timestamp(Timestamp::from_micros(Utc::now().timestamp_micros())?)
        .validate()?
        .build();

    let mut builder = EmbedBuilder::new()
        .color(COLOR_INVALID)
        .title(&message.content)
        .description("‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏™‡∏á‡∏™‡∏±‡∏¢")
        .author(author)
        .footer(footer);

    if let Some(attachment) = message.attachments.first() {
        if let Ok(image_source) = ImageSource::url(&attachment.url) {
            builder = builder.image(image_source);
        }
    }

    let info = builder.build();

    Ok([alert, info])
}

pub fn quarantine_reminder_embed(
    guild: &Reference<'_, Id<GuildMarker>, CachedGuild>,
    channel_id: impl Display,
    token: &str,
) -> anyhow::Result<Embed> {
    let mut footer = footer_with_icon(guild)?;
    footer.text = guild.name().to_string();

    let embed = EmbedBuilder::new()
        .color(COLOR_INVALID)
        .title("‚è≥ ‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô")
        .description(format!(
            "‡∏Ñ‡∏∏‡∏ì‡∏ñ‡∏π‡∏Å‡∏Å‡∏±‡∏Å‡∏Å‡∏±‡∏ô ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á `/verify {token}` ‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á <#{channel_id}> ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏ô‡∏ó‡∏ô‡∏≤‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á"
        ))
        .footer(footer)
        .validate()?;

    Ok(embed.build())
}

pub fn verify_success_embed(guild: &Reference<'_, Id<GuildMarker>, CachedGuild>) -> Option<Embed> {
    let mut footer = footer_with_icon(guild).ok()?;
    footer.text = guild.name().to_string();

    let embed = EmbedBuilder::new()
        .color(COLOR)
        .title("‚úÖ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
        .description("‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏ô‡∏ó‡∏ô‡∏≤‡πÑ‡∏î‡πâ‡πÅ‡∏•‡πâ‡∏ß")
        .footer(footer)
        .validate()
        .ok()?
        .build();

    Some(embed)
}

pub fn verify_fail_embed(guild: &Reference<'_, Id<GuildMarker>, CachedGuild>) -> Option<Embed> {
    let mut footer = footer_with_icon(guild).ok()?;
    footer.text = guild.name().to_string();

    let embed = EmbedBuilder::new()
        .color(COLOR_INVALID)
        .title("‚ùå ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
        .description("token ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á")
        .footer(footer)
        .validate()
        .ok()?
        .build();

    Some(embed)
}
