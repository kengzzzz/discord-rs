use std::fmt::Display;

use chrono::Utc;
use twilight_cache_inmemory::{Reference, model::CachedGuild};
use twilight_model::{
    channel::message::Embed,
    id::{Id, marker::GuildMarker},
};
use twilight_util::builder::embed::{EmbedBuilder, EmbedFieldBuilder, ImageSource};

pub(super) const COLOR: u32 = 0xF1C40F;
pub(super) const COLOR_INVALID: u32 = 0xE74C3C;

pub mod general;

pub use general::{footer_with_icon, guild_only_embed, pong_embed};

pub fn welcome_embed(
    guild: &Reference<'_, Id<GuildMarker>, CachedGuild>,
    member_tag: &str,
    member_name: &str,
) -> anyhow::Result<Embed> {
    let now = Utc::now().timestamp();

    let mut footer = footer_with_icon(guild)?;
    footer.text = format!("{} welcomes you!", guild.name());

    let mut builder = EmbedBuilder::new()
        .color(COLOR)
        .title(format!("‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ {member_tag}, ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö! üëã"))
        .description(format!(
            "‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ï‡∏±‡∏ß‡∏î‡πâ‡∏ß‡∏¢‡∏ä‡∏∑‡πà‡∏≠ **{}**!\n‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏õ‡πá‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏Ç‡∏≠‡∏á **{}** ‡πÅ‡∏•‡πâ‡∏ß üéâ",
            member_name,
            guild.name(),
        ))
        .field(EmbedFieldBuilder::new("‡πÄ‡∏ß‡∏•‡∏≤", format!("<t:{now}:R>")).inline())
        .footer(footer);

    if let Some(icon_hash) = guild.icon() {
        let url = format!(
            "https://cdn.discordapp.com/icons/{}/{}.png",
            guild.id(),
            icon_hash
        );
        builder = builder.thumbnail(ImageSource::url(url)?);
    }

    let embed = builder.validate()?.build();
    Ok(embed)
}

pub fn set_channel_embed(
    guild: &Reference<'_, Id<GuildMarker>, CachedGuild>,
    channel_name: &str,
    channel_id: impl Display,
    channel_type: &str,
    setter_name: &str,
) -> anyhow::Result<Embed> {
    let now = Utc::now().timestamp();

    let mut footer = footer_with_icon(guild)?;
    footer.text = guild.name().to_string();

    let embed = EmbedBuilder::new()
        .color(COLOR)
        .title(format!("‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏´‡πâ‡∏≠‡∏á ‚Äú{channel_name}‚Äù"))
        .description("‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à üéâ")
        .field(EmbedFieldBuilder::new("‡∏ä‡∏∑‡πà‡∏≠‡∏´‡πâ‡∏≠‡∏á", channel_name))
        .field(EmbedFieldBuilder::new(
            "‡∏£‡∏´‡∏±‡∏™‡∏´‡πâ‡∏≠‡∏á",
            channel_id.to_string(),
        ))
        .field(EmbedFieldBuilder::new("‡∏ä‡∏ô‡∏¥‡∏î‡∏´‡πâ‡∏≠‡∏á", channel_type))
        .field(EmbedFieldBuilder::new("‡∏ú‡∏π‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤", setter_name).inline())
        .field(EmbedFieldBuilder::new("‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠", format!("<t:{now}:R>")).inline())
        .footer(footer)
        .validate()?;
    Ok(embed.build())
}

pub fn set_role_embed(
    guild: &Reference<'_, Id<GuildMarker>, CachedGuild>,
    role_name: &str,
    role_id: impl Display,
    role_type: &str,
    setter: &str,
) -> anyhow::Result<Embed> {
    let now = Utc::now().timestamp();

    let mut footer = footer_with_icon(guild)?;
    footer.text = guild.name().to_string();

    let embed = EmbedBuilder::new()
        .color(COLOR)
        .title(format!("‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Role ‚Äú{role_name}‚Äù"))
        .description("‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à üéâ")
        .field(EmbedFieldBuilder::new("‡∏ä‡∏∑‡πà‡∏≠ Role", role_name))
        .field(EmbedFieldBuilder::new(
            "‡∏£‡∏´‡∏±‡∏™ Role",
            role_id.to_string(),
        ))
        .field(EmbedFieldBuilder::new("‡∏ä‡∏ô‡∏¥‡∏î Role", role_type))
        .field(EmbedFieldBuilder::new("‡∏ú‡∏π‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤", setter).inline())
        .field(EmbedFieldBuilder::new("‡πÄ‡∏ß‡∏•‡∏≤", format!("<t:{now}:R>")).inline())
        .footer(footer)
        .validate()?;

    Ok(embed.build())
}

pub fn role_message_embed(
    guild: &Reference<'_, Id<GuildMarker>, CachedGuild>,
    roles: &[(impl Display, impl Display)],
) -> anyhow::Result<Embed> {
    let mut footer = footer_with_icon(guild)?;
    footer.text = guild.name().to_string();

    let mut builder = EmbedBuilder::new()
        .color(COLOR)
        .title("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Role ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£")
        .description("‡∏Å‡∏î‡∏≠‡∏µ‡πÇ‡∏°‡∏à‡∏¥‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏±‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏≠‡∏≤ role ‡∏≠‡∏≠‡∏Å");

    for (name, emoji) in roles {
        builder =
            builder.field(EmbedFieldBuilder::new(format!("{emoji} {name}"), "\u{200B}").inline());
    }

    let embed = builder
        .footer(footer)
        .validate()?
        .build();
    Ok(embed)
}

pub fn help_embed(guild: &Reference<'_, Id<GuildMarker>, CachedGuild>) -> anyhow::Result<Embed> {
    let footer = footer_with_icon(guild)?;
    let description = "**‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ:**\n\
**/ping** - ‡∏î‡∏π‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏ô‡πà‡∏ß‡∏á‡∏Ç‡∏≠‡∏á‡∏ö‡∏≠‡∏ó\n\
**/intro** - ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ï‡∏±‡∏ß‡∏Ñ‡∏∏‡∏ì\n\
**/warframe market <item>** - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡∏•‡∏≤‡∏î\n\
**/warframe build <item>** - ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ build\n\
**/ai prompt <text>** - ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ prompt ‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß\n\
**/ai talk <message>** - ‡∏™‡∏ô‡∏ó‡∏ô‡∏≤‡∏Å‡∏±‡∏ö AI\n\
**/ai clear** - ‡∏•‡πâ‡∏≤‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∏‡∏¢‡∏Å‡∏±‡∏ö AI";
    let embed = EmbedBuilder::new()
        .color(COLOR)
        .title("‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ö‡∏≠‡∏ó")
        .description(description)
        .footer(footer)
        .validate()?
        .build();
    Ok(embed)
}
